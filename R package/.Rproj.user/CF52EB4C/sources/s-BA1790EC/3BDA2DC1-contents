rm(list = ls())
##GO analysis
##1. Package loading
##--------------------------------------------------------------------------------------------
library(igraph)
##--------------------------------------------------------------------------------------------

#2. Set up the overall file path
##--------------------------------------------------------------------------------------------
File_path<-"D:/Project/Pro_VMPLN/paper/SUPPLEMENTARY MATERIAL/Real data analysis/Application to scRNA-seq data from COVID-19 patients"
##--------------------------------------------------------------------------------------------

##3. Load data
##--------------------------------------------------------------------------------------------
load(paste(File_path,"/Downstream analysis/Obj_use/GRN_patient-type specific.Rdata",sep = ""))
load(paste(File_path,"/Downstream analysis/Obj_use/gene_choose_list.Rdata",sep = ""))
##--------------------------------------------------------------------------------------------

##4. Data description
##--------------------------------------------------------------------------------------------
##The cell type to show
celltype_choose<-"Group4" ## or "Group1", "Group2", "Group3"
TF_constraint<-c("TCF4","NR1H3","KLF5",##Enhanced
                 "ELF3","JUN","EGR2","NR4A1","ATF3" ## SUppressed
) ## The active TF of Group4
##--------------------------------------------------------------------------------------------

##5. Summary the information of edge related to active TFs for each patient-type
##--------------------------------------------------------------------------------------------
adjoint_mat_sign<-matrix(NA,nrow = 0,ncol = 5)
for(sign_use in c("positive","negative")){
  if(sign_use == "positive"){
    sign_choose<-(1)
  }else{
    sign_choose<-(-1)
  }
  for(patient_use in c("MILD","SEV")){
    index_TF_choose<-which(as.vector(GRN_patienttype_specific[[celltype_choose]][[patient_use]]$sign[TF_constraint,]) == sign_choose)
    # GRN_patienttype_specific[[celltype_choose]][[patient_use]]$sign[TF_constraint,]
    TF_vec<-rep(rownames(GRN_patienttype_specific[[celltype_choose]][[patient_use]]$sign[TF_constraint,]),ncol(GRN_patienttype_specific[[celltype_choose]][[patient_use]]$sign[TF_constraint,]))
    Target_vec<-rep(colnames(GRN_patienttype_specific[[celltype_choose]][[patient_use]]$sign[TF_constraint,]),each = nrow(GRN_patienttype_specific[[celltype_choose]][[patient_use]]$sign[TF_constraint,]))
    as.vector(GRN_patienttype_specific[[celltype_choose]][[patient_use]]$strength[TF_constraint,])[index_TF_choose]
    adjoint_mat_sign<-rbind(adjoint_mat_sign,
                            cbind(TF_vec[index_TF_choose],Target_vec[index_TF_choose],
                                  as.vector(GRN_patienttype_specific[[celltype_choose]][[patient_use]]$strength[TF_constraint,])[index_TF_choose],
                                  rep(patient_use,length(index_TF_choose)),
                                  rep(sign_use,length(index_TF_choose))))
  }
}
adjoint_mat_sign<-as.data.frame(adjoint_mat_sign)
names(adjoint_mat_sign)<-c("TF","TARGET","strength","patient","sign")
adjoint_mat_sign$strength<-as.numeric(adjoint_mat_sign$strength)
##--------------------------------------------------------------------------------------------

##6. Set one TF that aim to show its corresponding GRN and highlight the target gene in specific GO term
##--------------------------------------------------------------------------------------------
##
TF_choose<-c("ATF3") ## one of the TF in object "TF_constraint"
##
##highlight the target gene in the chosen Go term
GO_term_highlight<-c("response to unfolded protein",
                     "regulation of ERK1 and ERK2 cascade",
                     "response to oxidative stress",
                     "response to endoplasmic reticulum stress")
##
##--------------------------------------------------------------------------------------------

##7. Visualize the GRN of chosen TF for Moderate and Severe
##--------------------------------------------------------------------------------------------
##7.1 Preparsion
target_in_important_GO<-unique(Reduce("c",lapply(X = 1:length(GO_term_highlight), FUN = function(g){return(gene_choose_list[[GO_term_highlight[g]]])})))
adjoint_mat_sign_sub<-adjoint_mat_sign[which((adjoint_mat_sign$TF %in% TF_choose)),]
adjoint_mat_sign_sub<-adjoint_mat_sign_sub[which(adjoint_mat_sign_sub$TARGET != TF_choose),]
adjoint_mat_sign_sub$TF_patient<-paste(adjoint_mat_sign_sub$TF," (",ifelse(adjoint_mat_sign_sub$patient == "MILD","Moderate","Severe"),")",sep = "")

adjoint_mat_sign_sub_SEV<-adjoint_mat_sign_sub[adjoint_mat_sign_sub$patient == "SEV",]
adjoint_mat_sign_sub_MILD<-adjoint_mat_sign_sub[adjoint_mat_sign_sub$patient == "MILD",]
common_edge<-names(which(table(c(paste(adjoint_mat_sign_sub_SEV$TF,adjoint_mat_sign_sub_SEV$TARGET,adjoint_mat_sign_sub_SEV$sign,sep = " "),paste(adjoint_mat_sign_sub_MILD$TF,adjoint_mat_sign_sub_MILD$TARGET,adjoint_mat_sign_sub_MILD$sign,sep = " "))) == 2))
SEV_only_edge<-setdiff(paste(adjoint_mat_sign_sub_SEV$TF,adjoint_mat_sign_sub_SEV$TARGET,adjoint_mat_sign_sub_SEV$sign,sep = " "),paste(adjoint_mat_sign_sub_MILD$TF,adjoint_mat_sign_sub_MILD$TARGET,adjoint_mat_sign_sub_MILD$sign,sep = " "))
MILD_only_edge<-setdiff(paste(adjoint_mat_sign_sub_MILD$TF,adjoint_mat_sign_sub_MILD$TARGET,adjoint_mat_sign_sub_MILD$sign,sep = " "),paste(adjoint_mat_sign_sub_SEV$TF,adjoint_mat_sign_sub_SEV$TARGET,adjoint_mat_sign_sub_SEV$sign,sep = " "))

adjoint_mat_sign_sub$if_common<-ifelse(paste(adjoint_mat_sign_sub$TF,adjoint_mat_sign_sub$TARGET,adjoint_mat_sign_sub$sign,sep = " ") %in% common_edge,1,0)
adjoint_mat_sign_sub$if_just_SEV<-ifelse(paste(adjoint_mat_sign_sub$TF,adjoint_mat_sign_sub$TARGET,adjoint_mat_sign_sub$sign,sep = " ") %in% SEV_only_edge,1,0)
adjoint_mat_sign_sub$if_just_MILD<-ifelse(paste(adjoint_mat_sign_sub$TF,adjoint_mat_sign_sub$TARGET,adjoint_mat_sign_sub$sign,sep = " ") %in% MILD_only_edge,1,0)

##7.2 Visualization by igraph package
gu<-graph.data.frame(adjoint_mat_sign_sub[,c(6,2)],directed = TRUE)
l_my<-layout.fruchterman.reingold(gu)
rownames(l_my)<-names(V(gu))

V(gu)$color <- ifelse(names(V(gu)) %in% names(V(gu))[1:2],brewer.pal(9,"Purples")[8],ifelse(names(V(gu)) %in% target_in_important_GO,"#FF5555",brewer.pal(12,"Set3")[9]))
V(gu)$size<-ifelse(names(V(gu))%in% paste(rep(TF_choose,each = 2),c("MILD","SEV"),sep = "_"),20,15) * 0.8
V(gu)$shape <- ifelse(names(V(gu)) %in% names(V(gu))[1:2],"square","circle")

E(gu)$color<-c(brewer.pal(9,"Reds")[5],
               brewer.pal(9,"Blues")[5])[ifelse(adjoint_mat_sign_sub$sign == "positive",1,2)]
E(gu)$width<-2
##
plot(gu,
     vertex.label.color = ifelse(names(V(gu))%in% paste(rep(TF_choose,each = 2),c("(MILD","(SEV"),sep = " "),"white","black"),
     edge.arrow.size = 0,
     vertex.label.cex =ifelse(names(V(gu))%in% paste(rep(TF_choose,each = 2),c("MILD","SEV"),sep = "_"),1.5,
                              ifelse(names(V(gu)) %in% target_in_important_GO,1.5,1.2)),
     vertex.label.font = 2,
     vertex.label.color = "black",
     vertex.frame.color = ifelse(names(V(gu)) %in% names(V(gu))[1:2],brewer.pal(9,"Purples")[8],ifelse(names(V(gu)) %in% target_in_important_GO,"#FF5555",brewer.pal(12,"Set3")[9])),
     vertex.label.family = "Arial",
     layout = l_my)
##--------------------------------------------------------------------------------------------